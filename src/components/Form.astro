---
interface Props {
    NAME: string;
    EMAIL: string;
    SUBJECT: string;
    MESSAGE: string;
    SEND: string;
    SEND_MESSAGE: string[];
}

const {
    NAME: name,
    EMAIL: email,
    SUBJECT: subject,
    MESSAGE: message,
    SEND: send,
    SEND_MESSAGE: sendMessage
} = Astro.props
---

<form id='contact-form'>
    <span class='responsive-inputs'>
        <input type='text' id='name' name='name' placeholder={name} required />
        <input
            type='email'
            id='email'
            name='email'
            placeholder={email}
            required
        />
    </span>

    <input
        type='text'
        id='subject'
        name='subject'
        placeholder={subject}
        required
    />

    <textarea
        name='message'
        id='message'
        placeholder={message}
        rows='5'
        required></textarea>

    <button type='submit' class='submit-button' id='submit'>
        <div class='svg-wrapper-1'>
            <div class='svg-wrapper'>
                <svg viewBox='0 0 24 24' width='16' height='16'>
                    <path fill='none' d='M0 0h24v24H0z'></path>
                    <path
                        fill='currentColor'
                        d='M1.946 9.315c-.522-.174-.527-.455.01-.634l19.087-6.362c.529-.176.832.12.684.638l-5.454 19.086c-.15.529-.455.547-.679.045L12 14l6-8-8 6-8.054-2.685z'
                    ></path>
                </svg>
            </div>
        </div>
        <span>{send}</span>
    </button>

    <div class='status'>
        |
        <span class='green'>{sendMessage[0]}</span>
        <span class='red'>{sendMessage[1]}</span>
    </div>
</form>

<style>
    form {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 1.3rem;
        width: 600px;
        max-width: 100%;

        @media (max-width: 868px) {
            width: 100%;
        }
    }

    input,
    textarea {
        background: transparent;
        width: 100%;
        border: 1.5px solid var(--border-color-base);
        padding: 6px 10px;
        border-radius: 4px;
        color: var(--text-muted);
        outline: 0;
    }

    input::placeholder,
    textarea::placeholder {
        color: var(--text);
    }

    input:focus,
    textarea:focus {
        border-color: transparent;
        outline-width: 1.7px;
        outline-color: #0c49ffe1;
        outline-style: solid;
    }

    .responsive-inputs {
        display: flex;
        gap: 1.3rem;
        width: 100%;

        @media (max-width: 868px) {
            flex-direction: column;
        }
    }

    .submit-button {
        font-weight: 500;
        font-size: 14px;
        background: transparent;
        color: var(--text);
        padding: 8px 12px;
        display: flex;
        align-items: center;
        border: 1.5px solid var(--site-color-600);
        border-radius: 4px;
        overflow: hidden;
        transition: all 0.2s;
        cursor: pointer;

        @media (max-width: 868px) {
            font-size: 15px;
        }
    }

    .submit-button span {
        display: block;
        margin-left: 0.25rem;
        transition: all 0.3s ease-in-out;
    }

    .submit-button svg {
        display: block;
        transform-origin: center center;
        transition: transform 0.3s ease-in-out;
    }

    .submit-button.loading .svg-wrapper {
        animation: fly-1 0.6s ease-in-out infinite alternate;
    }

    .submit-button.loading svg {
        transform: translateX(1.2em) rotate(45deg) scale(1.1);
    }

    .submit-button.loading span {
        transform: translateX(5em);
    }

    .submit-button:active {
        transform: scale(0.95);
    }

    @keyframes fly-1 {
        from {
            transform: translateY(0.1em);
        }

        to {
            transform: translateY(-0.1em);
        }
    }

    .status {
        display: flex;
        align-items: center;
        line-height: 1.75rem;
        color: transparent;
    }

    .status span {
        display: none;
        line-height: 1.5rem;
        padding: 1.5px 0.5rem;
        border-radius: 4px;
        animation: show 4s ease forwards;
    }

    .green {
        background-color: rgba(34, 197, 94, 0.093);
        color: rgb(39, 226, 107);
    }

    .red {
        background-color: rgba(239, 68, 68, 0.093);
        color: rgb(255, 69, 69);
    }

    .status.success .green,
    .status.error .red {
        display: block;
    }

    @keyframes show {
        0% {
            opacity: 0;
            visibility: hidden;
        }
        20% {
            opacity: 1;
            visibility: visible;
        }
        90% {
            opacity: 1;
            visibility: visible;
        }
        100% {
            opacity: 0;
            visibility: hidden;
        }
    }
</style>

<script>
document.addEventListener('astro:after-swap', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement
    const submitButton = document.getElementById('submit')
    const nameInput = form?.querySelector('#name') as HTMLInputElement
    const emailInput = form?.querySelector('#email') as HTMLInputElement
    const subjectInput = form?.querySelector('#subject') as HTMLInputElement
    const messageInput = form?.querySelector('#message') as HTMLInputElement
    const statusSpan = document.querySelector('.status') as HTMLSpanElement

    const sendEmail = async () => {
        submitButton?.classList.add('loading')

        try {
            const response = await fetch('/api/resend.json', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: nameInput.value,
                    email: emailInput.value,
                    subject: subjectInput.value,
                    message: messageInput.value
                })
            })

            if (!response.ok) {
                statusSpan.classList.add('error')
            } else {
                statusSpan.classList.add('success')
            }
        } catch (error) {
            console.error(error)
        } finally {
            setTimeout(() => {
                statusSpan.classList.remove('success')
                statusSpan.classList.remove('error')
            }, 4000)

            form.reset()
            submitButton?.classList.remove('loading')
        }
    }

    form.addEventListener('submit', (e) => {
        e.preventDefault()
        sendEmail()
    })
})
</script>
